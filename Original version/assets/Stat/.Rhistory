knitr::opts_chunk$set(echo = TRUE)
#install.packages('knitr')    # uncomented to intall the library if need it
library(knitr)    # just to generate this tutorial
#install.packages('ggplot2')    # uncomented to intall the library if need it
library(ggplot2)   # for plotting
#install.packages('ggmap')    # uncomented to intall the library if need it
library(ggmap)    # for working with maps
point <- geocode('Calle Ample 4, Barcelona, España', source = "google")
names(point)      # we can check the names of the returned data.frame object
print(point$lon)
print(point$lat)
address <- revgeocode(as.numeric(point))
install.packages("bioconductor")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite()
set.seed(12345)
theta=runif(1,min=0,max=2)
print(theta) # mostramos el valor de la theta
set.seed(12345)
theta=runif(1,min=0,max=2)
print(theta) # mostramos el valor de la theta
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
knit_with_parameters('~/Documents/Máster/Fundamentos de bioinformática/Taska3/script.Rmd')
set.seed(12345)
theta=runif(1,min=0,max=2)
print(theta) # mostramos el valor de la theta
k = 10
muestra <- runif(k, min=0, max=theta)
k = 10
muestra <- runif(k, min=0, max=theta)
hist(muestra)
k = 1000
muestra <- runif(k, min=0, max=theta)
hist(muestra)
k = 10000
muestra <- runif(k, min=0, max=theta)
hist(muestra)
k = 10
muestra <- runif(k, min=0, max=theta)
hist(muestra)
k = 10
muestra <- runif(k, min=0, max=theta)
T_MM = 2 * mean(muestra)
T_MV = max(muestra)
print(T_MM)
print(T_MV)
# Matrix with 1000 rows and 2 columns for the estimators
res=matrix(0,nc=2,nr=1000)
k = 10
for (i in 1:1000){
x = runif(k, min=0, max=theta)
res[i,]=c( 2 * mean(x) , max(x))
# faltan cosas
}
boxplot(res)
abline(h=theta,col=2,lty=3)
apply(res,2,mean)
apply(res,2,var)
experimento1 <- function(k){
aux=matrix(0,nc=2,nr=1000)
for (i in 1:1000){
x = runif(k, min=0, max=theta)
aux[i,]=c( 2 * mean(x) , max(x))
}
boxplot(aux)
abline(h=theta,col=2,lty=3)
apply(aux,2,mean)
apply(aux,2,var)
}
experimento1(10)
experimento1 <- function(k){
aux=matrix(0,nc=2,nr=1000)
for (i in 1:1000){
x = runif(k, min=0, max=theta)
aux[i,]=c( 2 * mean(x) , max(x))
}
boxplot(aux)
abline(h=theta,col=2,lty=3)
print(apply(aux,2,mean))
print(apply(aux,2,var))
}
experimento1(10)
experimento1 <- function(k){
aux=matrix(0,nc=2,nr=1000)
for (i in 1:1000){
x = runif(k, min=0, max=theta)
aux[i,]=c( 2 * mean(x) , max(x))
}
boxplot(aux)
abline(h=theta,col=2,lty=3)
print(apply(aux,2,mean))
print(apply(aux,2,var))
}
experimento1(100)
experimento1(1000)
datos <- rnorm(20, 175, 100)
hist(datos)
datos <- rnorm(2000, 175, 100)
datos <- rnorm(2000, 175, 100)
hist(datos)
datos <- rnorm(20, 175, 100)
print(sd(datos))
print(summary(datos))
print(mean(datos))
print(sd(datos))
datos <- rnorm(20000, 175, 100)
print(mean(datos))
print(summary(datos))
print(mean(datos))
print(sd(datos))
print(sd(datos))
datos <- rnorm(20, 175, 100)
print(sd(datos))
print(summary(datos))
print(mean(datos))
print(sd(datos))
ic <- function (x, sigma, alpha = 0.05)
{
n <- length(x)
m <- mean(x)
ul <- m + qnorm(1 - alpha/2) * sigma/sqrt(n)
ll <- m - qnorm(1 - alpha/2) * sigma/sqrt(n)
cat("IC: (", 100 * (1 - alpha), "%)", ll, ul, "\n")
}
ic(datos, 100)
ic <- function (x, sigma, alpha = 0.05)
{
n <- length(x)
m <- mean(x)
ul <- m + qnorm(1 - alpha/2) * sigma/sqrt(n)
ll <- m - qnorm(1 - alpha/2) * sigma/sqrt(n)
cat("IC: (", 100 * (1 - alpha), "%)", ll, ul, "\n")
}
ic(datos, 10)
ic(datos, 10, alpha = 0.01)
n <- length(datos)
alpha <- 0.05
m <- mean(datos)
s <- sd(datos)
ul <- m + qt(1 - alpha/2, n - 1) * s/sqrt(n)
ll <- m - qt(1 - alpha/2, n - 1) * s/sqrt(n)
cat("IC: (", 100 * (1 - alpha), "%)", ll, ul, "\n")
print(t.test(datos))
X <- matrix(rnorm(200*50,mean=175,sd=10),ncol=50)
vm <- apply(X,1,mean)
# vm
# vm
print(vm)
mvm <- mean(vm)
svm <- sd(vm)
hist(vm)
vs2 <- apply(X,1,var)
vs2
hist(vs2)
ll <- vm - qnorm(0.975)*10/sqrt(50)
ul <- vm + qnorm(0.975)*10/sqrt(50)
ll <- vm - qnorm(0.975)*10/sqrt(50)
ul <- vm + qnorm(0.975)*10/sqrt(50)
cat("IC: (", 100 * (1 - 0.975), "%)", ll, ul, "\n")
ll <- vm - qnorm(0.975)*10/sqrt(50)
ul <- vm + qnorm(0.975)*10/sqrt(50)
#cat("IC: (", 100 * (1 - 0.975), "%)", ll, ul, "\n")
sum(ll > 175 | ul < 175)
plot(0,type="n",xlim=c(0,200),ylim=c(167,183))
abline(h=175,col=4)
segments(1:200,ll,1:200,ul,col=1+(ll>175 | ul<175))
alpha <- 0.05
m <- mean(datos)
s <- sd(datos)
ul <- vm + qt(1 - alpha/2, n - 1) * s/sqrt(n)
ll <- vm - qt(1 - alpha/2, n - 1) * s/sqrt(n)
alpha <- 0.05
ul <- vm + qt(1 - alpha/2, n - 1) * s/sqrt(n)
ll <- vm - qt(1 - alpha/2, n - 1) * s/sqrt(n)
sum(ll > 175 | ul < 175)
alpha <- 0.05
ul <- vm + qt(1 - alpha/2, n - 1) * s/sqrt(n)
ll <- vm - qt(1 - alpha/2, n - 1) * s/sqrt(n)
sum(ll > 175 | ul < 175)
plot(0,type="n",xlim=c(0,200),ylim=c(167,183))
abline(h=175,col=4)
segments(1:200,ll,1:200,ul,col=1+(ll>175 | ul<175))
knitr::opts_chunk$set(echo = TRUE)
# source("https://bioconductor.org/biocLite.R")
biocLite("UniProt.ws")
# source("https://bioconductor.org/biocLite.R")
library(UniProt.ws)
biocLite("UniProt.ws")
browseVignettes("UniProt.ws")
# source("https://bioconductor.org/biocLite.R")
library(UniProt.ws)
availableUniprotSpecies(pattern="musculus")
mouseUp <- UniProt.ws(10090)
mouseUp
availableUniprotSpecies(pattern="musculus")
Baiomys <- UniProt.ws(213557)
Baiomys
head(keytypes(Baiomys))
head(keytypes(Baiomys))
head(columns(Baiomys))
library("genbankr")
BiocManager::install("genbankr", version = "3.8")
if (!requireNamespace("BiocManager", quietly = TRUE))
BiocManager::install("genbankr", version = "3.8")
library("genbankr")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("genbankr", version = "3.8")
library("genbankr")
library("genbankr")
browseVignettes("genbankr")
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("genbankr", version = "3.8")
suppressPackageStartupMessages(library(genbankr))
install.packages("genbankr")
#suppressPackageStartupMessages(library(genbankr))
smpfile = system.file("sample.gbk", package="genbankr")
gb = readGenBank(smpfile)
install.packages("ape")
install.packages("seqinr")
library(ape) #this is a general R-package for phylogenetics and comparative methods
library("seqinr") #this is an specialized package for nucleotide sequence management
seq_1_DNAbin <- read.GenBank("JF806202") #save as DNAbin object:
attr(seq_1_DNAbin, "species") #to get the specie name of the sequence
seq_1_DNAbin$JF806202
str(seq_1_DNAbin)
secuencias_lagarto_query <- c("JF806202", "HM161150", "FJ356743", "JF806205", "JQ073190", "GU457971", "FJ356741", "JF806207",
"JF806210", "AY662592", "AY662591", "FJ356748", "JN112660", "AY662594", "JN112661", "HQ876437",
"HQ876434", "AY662590", "FJ356740", "JF806214", "JQ073188", "FJ356749", "JQ073189", "JF806216",
"AY662598", "JN112653", "JF806204", "FJ356747", "FJ356744", "HQ876440", "JN112651", "JF806215",
"JF806209")
secuencias_lagarto <- read.GenBank(secuencias_lagarto_query) # podemos pasarle un vector como parámetro y almacenar todas las respuestas en una sola variable
secuencias_lagarto
attributes(secuencias_lagarto) # Lista de todos los campos por cuyo contenido podemos preguntar
attr(secuencias_lagarto, "species") # nos devuelve el contenido del campo 'species'
write.dna(secuencias_lagarto, file ="lagarfos.fasta", format = "fasta", append = FALSE, nbcol = 6, colsep = " ", colw = 10)
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(Biostrings)
archivos <- list.files(path = "./Fasta", pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
archivos_fasta <- rep('empty', length(archivos))
for (i in 1:length(archivos)){
print(archivos[i])
cadena <- strsplit(archivos[i], '.fa')
print(cadena)
print(archivos[i])
if (cadena != archivos[i]){
archivos_fasta[i] = archivos[i]
}
print(j)
}
archivos_fasta <- rep('empty', length(archivos))
for (i in 1:length(archivos)){
print(archivos[i])
cadena <- strsplit(archivos[i], '.fa')
print(cadena)
print(archivos[i])
if (cadena != archivos[i]){
archivos_fasta[i] = archivos[i]
}
print(i)
}
archivos_fasta <- rep('empty', length(archivos))
for (i in 1:length(archivos)){
#print(archivos[i])
cadena <- strsplit(archivos[i], '.fa')
#print(cadena)
#print(archivos[i])
if (cadena != archivos[i]){
archivos_fasta[i] = archivos[i]
}
print(i)
}
archivos_fasta <- rep('empty', length(archivos))
for (i in 1:length(archivos)){
#print(archivos[i])
cadena <- strsplit(archivos[i], '.fa')
#print(cadena)
#print(archivos[i])
if (cadena != archivos[i]){
archivos_fasta[i] = archivos[i]
}
#print(i)
}
print(archivos_fasta)
dna <- rep('empty', length(archivos))
for (i in 1:length(archivos_fasta)){
if (archivos_fasta[i] != "empty"){
#print(archivos_fasta[i])
dna[i] <-  readDNAStringSet("./Fasta" + archivos_fasta[i])
}
}
dna <- rep('empty', length(archivos))
for (i in 1:length(archivos_fasta)){
if (archivos_fasta[i] != "empty"){
#print(archivos_fasta[i])
print("./Fasta" + archivos_fasta[i])
#dna[i] <-  readDNAStringSet("./Fasta" + archivos_fasta[i])
}
}
dna <- rep('empty', length(archivos))
for (i in 1:length(archivos_fasta)){
if (archivos_fasta[i] != "empty"){
#print(archivos_fasta[i])
print(paste("./Fasta", archivos_fasta[i]))
#dna[i] <-  readDNAStringSet("./Fasta" + archivos_fasta[i])
}
}
dna <- rep('empty', length(archivos))
for (i in 1:length(archivos_fasta)){
if (archivos_fasta[i] != "empty"){
#print(archivos_fasta[i])
print(paste("./Fasta/", archivos_fasta[i], sep=""))
#dna[i] <-  readDNAStringSet("./Fasta" + archivos_fasta[i])
}
}
dna <- rep('empty', length(archivos))
for (i in 1:length(archivos_fasta)){
if (archivos_fasta[i] != "empty"){
#print(archivos_fasta[i])
#print(paste("./Fasta/", archivos_fasta[i], sep=""))
dna[i] <-  readDNAStringSet(paste("./Fasta/", archivos_fasta[i], sep=""))
}
}
print(dna)
print(dna)
readDNAStringSet(paste("./Fasta/", archivos_fasta[2], sep=""))
dna <- rep('empty', length(archivos))
for (i in 1:length(archivos_fasta)){
if (archivos_fasta[i] != "empty"){
#print(archivos_fasta[i])
#print(paste("./Fasta/", archivos_fasta[i], sep=""))
dna[i] <-  readDNAStringSet(paste("./Fasta/", archivos_fasta[i], sep=""))
}
}
print(dna[1])
print(dna[2])
for (i in 1:length(archivos_fasta)){
if (archivos_fasta[i] != "empty"){
#print(archivos_fasta[i])
#print(paste("./Fasta/", archivos_fasta[i], sep=""))
readDNAStringSet(paste("./Fasta/", archivos_fasta[i], sep=""))
}
}
for (i in 1:length(archivos_fasta)){
if (archivos_fasta[i] != "empty"){
#print(archivos_fasta[i])
#print(paste("./Fasta/", archivos_fasta[i], sep=""))
objeto <- readDNAStringSet(paste("./Fasta/", archivos_fasta[i], sep=""))
longitudes <- objeto$width  # será un vector
secuencias <-  objeto$seq   # vector de nuevo
nombres <- objeto$names  # vector de nuevo
}
}
nombres
for (i in 1:length(archivos_fasta)){
if (archivos_fasta[i] != "empty"){
#print(archivos_fasta[i])
#print(paste("./Fasta/", archivos_fasta[i], sep=""))
objeto <- readDNAStringSet(paste("./Fasta/", archivos_fasta[i], sep=""))
longitudes <- objeto$width  # será un vector
secuencias <-  objeto$seq   # vector de nuevo
nombres <- objeto$names  # vector de nuevo
}
}
sequencias
for (i in 1:length(archivos_fasta)){
if (archivos_fasta[i] != "empty"){
#print(archivos_fasta[i])
#print(paste("./Fasta/", archivos_fasta[i], sep=""))
objeto <- readDNAStringSet(paste("./Fasta/", archivos_fasta[i], sep=""))
longitudes <- objeto$width  # será un vector
secuencias <-  objeto$seq   # vector de nuevo
nombres <- objeto$names  # vector de nuevo
}
}
secuencias
for (i in 1:length(archivos_fasta)){
if (archivos_fasta[i] != "empty"){
#print(archivos_fasta[i])
#print(paste("./Fasta/", archivos_fasta[i], sep=""))
objeto <- readDNAStringSet(paste("./Fasta/", archivos_fasta[i], sep=""))
longitudes <- objeto$width  # será un vector
secuencias <-  objeto$seq   # vector de nuevo
nombres <- objeto$names  # vector de nuevo
print(nombres)
}
}
readDNAStringSet(paste("./Fasta/", archivos_fasta[2], sep=""))$width
readDNAStringSet(paste("./Fasta/", archivos_fasta[2], sep="")).width
readDNAStringSet(paste("./Fasta/", archivos_fasta[2], sep=""))
class(readDNAStringSet(paste("./Fasta/", archivos_fasta[2], sep="")) )
readDNAStringSet(paste("./Fasta/", archivos_fasta[2], sep=""))
readDNAStringSet(paste("./Fasta/", archivos_fasta[2], sep=""))
readDNAStringSet(paste("./Fasta/", archivos_fasta[2], sep=""))['width']
readDNAStringSet(paste("./Fasta/", archivos_fasta[2], sep=""))[1]
readDNAStringSet(paste("./Fasta/", archivos_fasta[2], sep=""))[1]$width
readDNAStringSet(paste("./Fasta/", archivos_fasta[2], sep=""))[1]$names
readDNAStringSet(paste("./Fasta/", archivos_fasta[2], sep=""))[1][1]
readDNAStringSet(paste("./Fasta/", archivos_fasta[2], sep=""))[1]
for (i in 1:length(archivos_fasta)){
if (archivos_fasta[i] != "empty"){
#print(archivos_fasta[i])
#print(paste("./Fasta/", archivos_fasta[i], sep=""))
objeto <- readDNAStringSet(paste("./Fasta/", archivos_fasta[i], sep=""))
print(objeto)
}
}
for (i in 1:length(archivos_fasta)){
if (archivos_fasta[i] != "empty"){
#print(archivos_fasta[i])
#print(paste("./Fasta/", archivos_fasta[i], sep=""))
objeto <- readDNAStringSet(paste("./Fasta/", archivos_fasta[i], sep=""))
kable(objeto)
}
}
library(knitr)
for (i in 1:length(archivos_fasta)){
if (archivos_fasta[i] != "empty"){
#print(archivos_fasta[i])
#print(paste("./Fasta/", archivos_fasta[i], sep=""))
objeto <- readDNAStringSet(paste("./Fasta/", archivos_fasta[i], sep=""))
kable(objeto)
}
}
archivos_fasta <- rep('empty', length(archivos))
for (i in 1:length(archivos)){
cadena <- strsplit(archivos[i], '.fa')
if (cadena != archivos[i]){
archivos_fasta[i] = archivos[i]
}
}
print(archivos_fasta)
```{r reading-information, echo=TRUE}
for (i in 1:length(archivos_fasta)){
if (archivos_fasta[i] != "empty"){
objeto <- readDNAStringSet(paste("./Fasta/", archivos_fasta[i], sep=""))
kable(objeto)
}
}
for (i in 1:length(archivos_fasta)){
if (archivos_fasta[i] != "empty"){
objeto <- readDNAStringSet(paste("./Fasta/", archivos_fasta[i], sep=""))
print(objeto)
}
}
setwd("~/Documents/Programación/TheGraph.es/assets/Stat")
knitr::opts_chunk$set(echo = TRUE)
x <- rnorm(50)
library(ggplot2)
x <- rnorm(50)
y <- runif(30)
ggplot(data=x, aes()) +
ggplot(data=y, aes()) +
geom_histogram()
hist(x)
x <- rnorm(5000)
y <- runif(30)
hist(x, bins=50)
x <- rnorm(5000)
y <- runif(3000)
hist(x)
hist(y)
ks.test(x, y)
x <- rnorm(5000)
y <- runif(3000)
hist(x, col=rgb(0,0,1,1/4))
hist(y, col=rgb(1,0,0,1/4), add=TRUE)
N = 50000
x <- rnorm(N)
y <- rnorm(N, mean = 1.7, sd = 0.4)
hist(x, col=rgb(0,0,1,1/4))
hist(y, col=rgb(1,0,0,1/4), add=TRUE)
ks.test(x, y)
